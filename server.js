 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var app = express();
var rp = require('request-promise');

var MongoClient = require('mongodb').MongoClient;

MongoClient.connect(process.env.MONGODB_URL, (err, db) => {
  if(!err) {
    console.log('Connected to the database');
    
    var picSearchCollection = db.collection('picSearch');
    
    if (!process.env.DISABLE_XORIGIN) {
      app.use(function(req, res, next) {
        var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
        var origin = req.headers.origin || '*';
        if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
             console.log(origin);
             res.setHeader('Access-Control-Allow-Origin', origin);
             res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
        }
        next();
      });
    }

    app.use('/public', express.static(process.cwd() + '/public'));

    app.route('/_api/package.json')
      .get(function(req, res, next) {
        console.log('requested');
        fs.readFile(__dirname + '/package.json', function(err, data) {
          if(err) return next(err);
          res.type('txt').send(data.toString());
        });
      });
    
    // for testing:
    // https://pic-search.glitch.me/api/imagesearch/cats?offset=3

    // EXAMPLE: /api/imagesearch/lolcats%20funny?offset=10
    app.route('/api/imagesearch/:searchString')
      .get(function(req, res) {
        // save a record to the database of:
        // when: "2017-07-20T03:22:15.904Z"
        let timeOfSearch = new Date();
      
        // get the number of page to display
        let startingIndexToView;
        if (req.query.page) {
          if (req.query.page == 1) {
            startingIndexToView = 1;
          } else {
            startingIndexToView = (req.query.page-1) * 10;
          }
        } else {
          startingIndexToView = 1;
        }
      
        // getting the clean search query
        let searchString = req.params.searchString;
        let decodedSearchString = decodeURI(searchString);
      
        // check if it is a page or not?
        // don't have to convert but just in case.
      
        // add handling for when it's not specified
        let indexToStart = Number(startingIndexToView);
        let cx = process.env.GENGINE_ID;
      
        // make a request to some API to get back the results, send them back to user.
        let baseImageSearchURL = "https://www.googleapis.com/customsearch/v1/?q=";
        let imageSearchURL = baseImageSearchURL + searchString;
        imageSearchURL += "&start=" + indexToStart;
        imageSearchURL += "&key=" + process.env.GSEARCH_KEY;
        imageSearchURL += "&cx=" + cx
        imageSearchURL += "&searchType=image"
            
        // push the search info into database
        let searchInfo = {
          "term": decodedSearchString,
          "when": timeOfSearch
        }
        picSearchCollection.insert(searchInfo);
      
        // console.log('searchString: ' + searchString);
        // console.log('decodedSearchString:' + decodedSearchString);
      
        // send request to Google Custom Search API
        rp(imageSearchURL)
          .then((imageData) => {
            // do something with image data
            imageData = JSON.parse(imageData);
          
            let imageResults = [];
          
            imageData.items.forEach((imgObj) => {
              let imageInfo = {
                url: imgObj.link,
                snippet: imgObj.snippet,
                thumbnail: imgObj.image.thumbnailLink,
                context: imgObj.image.contextLink
              }
              
              imageResults.push(imageInfo);
            });         
            res.json(imageResults);
          })
          .catch((err) => {
              console.log('Houston, we have a problem.');
              console.log(err);
              res.json({ "error": err });
          });
      })

    // EXAMPLE: /api/latest/imagesearch/
    app.route('/api/latest/imagesearch')
      .get(function(req, res) {
          picSearchCollection.find({}, {'_id': 0}).sort({when:-1}).limit(10).toArray((error, latestSearches) => {
              if (err) throw error;
              res.send(latestSearches);
          });
      });

    app.route('/')
        .get(function(req, res) {
          res.sendFile(process.cwd() + '/views/index.html');
        })

    // Respond not found to all the wrong routes
    app.use(function(req, res, next){
      res.status(404);
      res.type('txt').send('Not found');
    });

    // Error Middleware
    app.use(function(err, req, res, next) {
      if(err) {
        res.status(err.status || 500)
          .type('txt')
          .send(err.message || 'SERVER ERROR');
      }  
    })

    app.listen(process.env.PORT, function () {
      console.log('Node.js listening ...');
    });
    
  } else {
    console.log('Error when connecting to the database');
  }
});



